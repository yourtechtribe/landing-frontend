name: CI/CD Workflow

#esperar a tenir permisos per yourtechtribe
on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{secrets.GPC_PROJECT_ID}}
  REGION: 'europe-southwest1'
  SERVICE: ${{secrets.GPC_PROJECT_SERCICE}}
  WORKLOAD_IDENTITY_PROVIDER: ${{secrets.GPC_WORKLOAD_IDENTITY_PROVIDER}}
  SERVICE_ACCOUNT: ${{secrets.GPC_SERVICE_ACCOUNT}}
  ARTIFACT_REGISTRY_LOCATION: ${{secrets.GPC_ARTIFACT_REGISTRY_LOCATION}}
  ARTIFACT_REGISTRY_REPO: ${{secrets.GPC_ARTIFACT_REGISTRY_REPO}}


permissions:
  contents: write

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Check for Empty Values
        run: |
          if [ -z "${{ env.REGION }}" ] || [ -z "${{ env.PROJECT_ID }}" ] || [ -z "${{ env.ARTIFACT_REGISTRY_REPO }}" ] || [ -z "${{ env.SERVICE }}" ]; then
          echo "One or more environment variables are empty!"
          exit 1
          fi

        env:
         REGION: ${{ env.REGION }}
         PROJECT_ID: ${{ env.PROJECT_ID }}
         ARTIFACT_REGISTRY_REPO: ${{ env.ARTIFACT_REGISTRY_REPO }}
         SERVICE: ${{ env.SERVICE }}
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Build
        run: npm run build --if-present

      - name: Run Tests with Coverage
        run: |
          npm install --save-dev jest
          npx jest --coverage 
        env:
          CI: true

  static-code-analysis:
    name: Static Code Analysis.
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SonarQube Scanner
        run: npm install -g sonar-scanner

      - name: Run SonarQube Analysis
        run: |
          sonar-scanner \
            -Dsonar.projectKey='${{secrets.SONAR_PROJECTID}}' \
            -Dsonar.organization=${{secrets.SONAR_ORG}} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{secrets.SONAR_LOGIN}} \
            -Dsonar.qualitygate.wait=true \

  release:
   name: Semantic Release
   runs-on: ubuntu-latest
   needs: static-code-analysis

   steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install dependencies
      run: npm ci
    
    - name: Debug Semantic Release Output
      run: npx semantic-release --dry-run
    
    - name: Run semantic release
      id: semantic_release
      run: |
        export VERSION=$(npx semantic-release --dry-run | grep 'The next release version is' | sed -E 's/.* ([[:digit:].]+)$/\1/')
        if [ -z "$VERSION" ]; then
          echo "Failed to determine version" >&2
          exit 1
        fi
        echo "version=${VERSION}-${GITHUB_SHA::12}" >> $GITHUB_OUTPUT

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Perform release
      id: perform_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npx semantic-release

    - name: view generated version
      run: echo "version=${{ steps.semantic_release.outputs.version }}"

  deploy:
   runs-on: ubuntu-latest
   needs: release

   permissions:
    contents: read
    id-token: write

   steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
        service_account: '${{ env.SERVICE_ACCOUNT }}'

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    - name: Build and Push Image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: '${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-run-source-deploy/${{ env.SERVICE }}:${{ steps.semantic_release.outputs.version}}' 

    - name: Deploy to cloud run
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: '${{ env.SERVICE }}'
        region: '${{ env.REGION }}'
        image: '${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-run-source-deploy/${{ env.SERVICE }}:${{ steps.semantic_release.outputs.version }}' 
        env_vars: |
          ENVIRONMENT=prod
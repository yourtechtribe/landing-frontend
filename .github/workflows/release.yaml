name: CI/CD Workflow

#esperar a tenir permisos per yourtechtribe
on:
  push:
    branches:
      - main

env:
  PROJECT_ID: 'ytt-mia'
  REGION: 'europe-southwest1'
  SERVICE: 'autoversion-mdas'
  WORKLOAD_IDENTITY_PROVIDER: 'projects/525373923741/locations/global/workloadIdentityPools/github-workload/providers/github-actions'
  SERVICE_ACCOUNT: 'mia-sandboxv1@ytt-mia.iam.gserviceaccount.com'
  ARTIFACT_REGISTRY_LOCATION: 'europe-southwest1-docker.pkg.dev'
  ARTIFACT_REGISTRY_REPO: 'cloud-run-source-deploy'


permissions:
  contents: write

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Build
        run: npm run build --if-present

      - name: Run Tests with Coverage
        run: |
          npm install --save-dev jest
          npx jest --coverage 
        env:
          CI: true

  static-code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SonarQube Scanner
        run: npm install -g sonar-scanner

      - name: Run SonarQube Analysis
        run: |
          sonar-scanner \
            -Dsonar.projectKey=J-hu960_autoversion-node \
            -Dsonar.organization=mysecretsonarkey \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=07612ba44f74ac2a316f33016d01d1a5038605f3 \
            -Dsonar.qualitygate.wait=true \

  release:
   name: Semantic Release
   runs-on: ubuntu-latest
   needs: static-code-analysis

   steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install dependencies
      run: npm ci
    
    - name: Debug Semantic Release Output
      run: npx semantic-release --dry-run
    
    - name: Run semantic release
      id: semantic_release
      run: |
          version=$(npx semantic-release --dry-run | grep -oP "(?<=The next release version is )\S+")
          if [ -z "$version" ]; then
            echo "Error: Could not extract release version."
            exit 1
          fi
          echo "new_release=$version" >> $GITHUB_ENV
          echo "::set-output name=version::$version"  # Esto guarda la versi√≥n como salida del job

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
   runs-on: ubuntu-latest
   needs: release

   permissions:
    contents: read
    id-token: write

   steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
        service_account: '${{ env.SERVICE_ACCOUNT }}'

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    - name: Build and Push cocohomes Backend Image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: '${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-run-source-deploy/${{ env.SERVICE }}:${{ needs.release.outputs.version }}'  # Usamos la salida `version`

    - name: Deploy Backend to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: '${{ env.SERVICE }}'
        region: '${{ env.REGION }}'
        image: '${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-run-source-deploy/${{ env.SERVICE }}:${{ needs.release.outputs.version }}'  # Usamos la salida `version`
        env_vars: |
          ENVIRONMENT=prod
